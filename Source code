import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.preprocessing import LabelEncoder, StandardScaler from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

Load the dataset

file_path = '/mnt/data/dataset_traffic_accident_prediction1.csv' data = pd.read_csv(file_path)

Drop rows with missing target variable 'Accident'

data.dropna(subset=['Accident'], inplace=True)

Fill missing values for other columns with mode for categorical and median for numerical features

for col in data.columns: if data[col].dtype == 'object': data[col].fillna(data[col].mode()[0], inplace=True) else: data[col].fillna(data[col].median(), inplace=True)

Encode categorical features

label_encoders = {} for col in data.select_dtypes(include='object').columns: le = LabelEncoder() data[col] = le.fit_transform(data[col]) label_encoders[col] = le

Feature scaling

scaler = StandardScaler() scaled_features = scaler.fit_transform(data.drop('Accident', axis=1)) X = pd.DataFrame(scaled_features, columns=data.drop('Accident', axis=1).columns) y = data['Accident']

Split the data into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

Train a Random Forest model

model = RandomForestClassifier(n_estimators=100, random_state=42) model.fit(X_train, y_train)

Evaluate the model

y_pred = model.predict(X_test) print('Confusion Matrix:\n', confusion_matrix(y_test, y_pred)) print('\nClassification Report:\n', classification_report(y_test, y_pred)) print('\nAccuracy Score:', accuracy_score(y_test, y_pred))
